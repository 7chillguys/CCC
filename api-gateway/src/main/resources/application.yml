spring:
  application:
    # 어플리케이션의 이름관리 중요!! 오타 주의(게이트웨이 등록시)
    # 해당 이름은 ApiGatewayApplication (앱의 이름)과 연관
    name: api-gateway

  # 서비스 등록 방법
  # 1. 환경 변수에서 서비스 등록 세팅하는 방법
  # 2. 코드에서 직접 서비스 등록 구성 (*)

  # 성능 향상 옵션 -> Spring Cloud에서 버전 호환성 검사 비활성화 -> 성능 향상
  cloud:
    compatibility-verifier:
      enabled: false # 기본값 일치

  # 빈을 여러 개 생성할 경우 -> 동일 이름의 빈이 있을 때 덮어쓰기
  main:
    allow-bean-definition-overriding: true

  # Redis 설정 (모든 서비스가 공유)
  data:
    redis:
      host: localhost
      port: 6379
      repositories:
        enabled: false

# 게이트웨이 담당, 모든 유저(혹은 프런트엔드)는 이 포트로 접속 -> 8080
server:
  port: 8080

# Eureka 서버의 서비스 등록 및 헬스 체크 설정
eureka:
  client:
    service-url:
      # 현재는 미구현 상태로 404 에러 발생 가능
      defaultZone: http://localhost:8761/eureka

  # 유레카 서버에 서비스 등록, 헬스 체크 (계속 살아있는지 체크 주기 조정)
  # 특정 시간 동안 갱신이 없으면, 유레카 서버에서 제거 -> 제한 시간 지정
  instance:
    lease-renewal-interval-in-seconds: 15  # 기본 30초 -> 15초 (헬스 체크 주기)
    lease-expiration-duration-in-seconds: 20  # 기본 90초 -> 20초 (서비스 제거 기준)

# JWT (커스텀 환경 변수)
jwt:
  token:
    raw_secret_key: ee307329f2112629066634f34e18a07c060bbf6a9b17f2d28327659cdc566bf6
  # 만료 시간을 임의로 짧게 부여 -> 조정 가능
  expiration: 1000  # 1000초

# RDB는 서비스별로 따로 관리
