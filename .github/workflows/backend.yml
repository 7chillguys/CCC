name: Backend for ci/cd

# 트리거
on:
  # 원인 : 푸시
  push:
    # 대상 브런치
    branches:
      # 2. 대상 브런치는 main(본인 브런치명)
      - Eureka

# 해야될 일 => jobs
jobs:
  # 잡 전체에 대한 이름 (커스텀)
  cicd-deploy:
    # ubuntu linux 준비 -> 해당 작업이 진행되는 베이스 OS 지정
    runs-on: ubuntu-latest
    # 개별 작업 단계 지정
    steps:
      # https://github.com/actions/checkout 사용
      # 해당 작업이 수행되면 본 레포지토리(저장소)가 체크아웃되어 os단에 저장
      # 향후 워클로우에서 엑세스 처리 가능하게 구성된다
      # name: 작업명 기술, uses: 실제할일 기술
      - name: Github Repository 내 파일들 checkout(불러오기) 수행
        uses: actions/checkout@v4

      # JDK 17 버전 설치
      # https://github.com/actions/setup-java
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      # application.yml 동적 생성
      # 소스 코드내에 위치 (덮어쓰기?, 신규작성?)
      # RDS 세팅된 이후 진행
      # 현재는 skip
      # echo "${{ secrets.APPLICATION_PRO }}" > ./src/main/resources/application.properties
      # ls ./src/main/resources/
      - name: 여러 application.properties 동적 생성
        run: |
          # 패키지별로 application.properties 동적 생성
          echo "${{ secrets.CHAT_PRO }}" > ./ccc-chat/src/main/resources/application.properties
          echo "${{ secrets.USER_PRO }}" > ./ccc-user/src/main/resources/application.properties
          echo "${{ secrets.GAME_PRO }}" > ./ccc-game/src/main/resources/application.properties
          echo "${{ secrets.MENU_PRO }}" > ./ccc-menu/src/main/resources/application.properties
          echo "${{ secrets.API_GATEWAY_PRO }}" > ./api-gateway/src/main/resources/application.properties
          echo "${{ secrets.EUREKA_YML }}" > ./eureka-server/src/main/resources/application.yml
          # 확인용 디렉토리 리스팅
          ls ./ccc-chat/src/main/resources/  
          ls ./ccc-user/src/main/resources/
          ls ./ccc-game/src/main/resources/
          ls ./ccc-menu/src/main/resources/
          ls ./api-gateway/src/main/resources/
          ls ./eureka-server/src/main/resources/
          echo "GAME_PRO: ${{ secrets.GAME_PRO }}"
          echo "MENU_PRO: ${{ secrets.MENU_PRO }}"
      # build 준비
      # chmod +x ./gradlew : 퍼미션 오류 발생시 처리
      # ./gradlew clean build
      - name: 각 패키지별 단위 테스트 및 빌드
        # 명령어가 여러개면 | 추가
        # 1. 빌드용 쉘스크립트(gradlew)를 퍼미션 조정(chmod +x ./gradlew)
        # 2. 빌드( ./gradlew clean build)
        # 3. 현재 위치 확인(pwd)
        #    /home/runner/work/demo-deploy/demo-deploy
        # 4. 현재 위치 목록(ls)
        #    build ... src
        # 5. 빌드된 산출물의 목록 확인(ls ./build/libs)
        #    demo-deploy-0.0.1-SNAPSHOT-plain.jar ...
        run: |
          # 각 패키지별로 빌드를 분리하여 실행
          # api-gateway 패키지
          cd ./api-gateway
          chmod +x ./gradlew
          ./gradlew clean build
          ls ./build/libs
          
          # ccc-chat 패키지
          cd ../ccc-chat
          chmod +x ./gradlew
          ./gradlew clean build
          ls ./build/libs
          
          # ccc-user 패키지
          cd ../ccc-user
          chmod +x ./gradlew
          ./gradlew clean build
          ls ./build/libs
          
          # eureka-server 패키지
          cd ../eureka-server
          chmod +x ./gradlew
          ./gradlew clean build
          ls ./build/libs
          
          # ccc-game 패키지
          cd ../ccc-game
          chmod +x ./gradlew
          ./gradlew clean build
          ls ./build/libs
          
          # ccc-menu 패키지
          cd ../ccc-menu
          chmod +x ./gradlew
          ./gradlew clean build
          ls ./build/libs
      # 이름이 너무 길므로 적당하게 수정 -> 리눅스 명령어
      # 파일 위치를 변경하면서 이름도 변경 -> mv
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run: |
          mv ./ccc-chat/build/libs/*SNAPSHOT.jar ./ccc-chat/run.jar
          mv ./ccc-user/build/libs/*SNAPSHOT.jar ./ccc-user/run.jar
          mv ./ccc-game/build/libs/*SNAPSHOT.jar ./ccc-game/run.jar
          mv ./ccc-menu/build/libs/*SNAPSHOT.jar ./ccc-menu/run.jar
          mv ./api-gateway/build/libs/*SNAPSHOT.jar ./api-gateway/run.jar
          mv ./eureka-server/build/libs/*SNAPSHOT.jar ./eureka-server/run.jar
          ls
      # EC2 로 업로드
      # https://github.com/appleboy/scp-action
      # SSH를 통해서 파일등을 복사(업로드)
      # 호스트정보(IP), 접속자명(ubuntu), 키파일(pem) -> 시크릿!!
      # EC2_HOST
      # 업로드 대상(run.jar)
      # 타겟(EC2)의 특정 경로(복사될 위치), /home/ubuntu/server/demo (*파일위치 확인 필요)
      - name: EC2에 jar파일 업로드
        uses: appleboy/scp-action@v0.1.7
        # 위의 액션을 위한 파라미터
        # SSH의 포트를 보안산 이유로 22->다른번호변경 했다면
        # PORT 설정 필요
        # 파일이 여러개면 "파일, 파일, ... "
        # 원격 서버에 폴더도 자동 생성되는지 검토
        # ./api-gateway/run.jar, ./ccc-chat/run.jar, ./ccc-game/run.jar, ./ccc-menu/run.jar, ./ccc-user/run.jar, jar ./eureka-server/run.jar
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ./api-gateway/run.jar, ./ccc-chat/run.jar, ./ccc-game/run.jar, ./ccc-menu/run.jar, ./ccc-user/run.jar, ./eureka-server/run.jar
          target: /home/ubuntu/server/demo

      # ec2 접속,서버가동!!
      # https://github.com/appleboy/ssh-action
      - name: SSH로 ec2에 정리후, 접속후 서버가동
        uses: appleboy/ssh-action@v1.2.0
        # script_stop : true -> 오류나면 중단
        # 처리할 반복적 작업
        # 1. 기존 jar 파일 삭제 처리 (업로드 위치, 구동 위치 구분)
        #    구동 위치 : /home/ubuntu/server/web <- *설정(가정)
        #    rm -rf 대상 => 대상의 폴더 및 하위 파일까지 모두다 삭제
        # 2. 새롭게 폴더 생성 /home/ubuntu/server/web
        #    mkdir /home/ubuntu/server/web
        # 3. jar 파일 이동 (~/demo/*.jar => ~/web/*.jar)
        #    mv
        # 4. jar 파일이 존재하는 위치로 이동
        #    cd /home/ubuntu/server/web
        # 5. 서버 중단 -> 8080포트를 사용하는 프로세스 중단
        #    sudo fuser -k -n tcp 8080 || true
        #    무조건 다음 단계로 넘어가게 처리 (|| true)
        # 6. 서버구동
        #    엑세스, 에러로그등 전체 로그를 output.log으로 출력
        #    nohup java -jar run.jar > ./output.log 2>&1 &
        # 7. 뒷정리
        #    rm -rf /home/ubuntu/server/demo
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            rm -rf /home/ubuntu/server/web
            mkdir /home/ubuntu/server/web
            mkdir -p /home/ubuntu/server/web/ccc-chat
            mkdir -p /home/ubuntu/server/web/ccc-user
            mkdir -p /home/ubuntu/server/web/ccc-game
            mkdir -p /home/ubuntu/server/web/ccc-menu
            mkdir -p /home/ubuntu/server/web/api-gateway
            mkdir -p /home/ubuntu/server/web/eureka-server
            ls /home/ubuntu/server/demo/ccc-game/run.jar
            mv /home/ubuntu/server/demo/ccc-chat/run.jar /home/ubuntu/server/web/ccc-chat/run.jar
            mv /home/ubuntu/server/demo/ccc-user/run.jar /home/ubuntu/server/web/ccc-user/run.jar
            mv /home/ubuntu/server/demo/ccc-game/run.jar /home/ubuntu/server/web/ccc-game/run.jar
            mv /home/ubuntu/server/demo/ccc-menu/run.jar /home/ubuntu/server/web/ccc-menu/run.jar
            mv /home/ubuntu/server/demo/api-gateway/run.jar /home/ubuntu/server/web/api-gateway/run.jar
            mv /home/ubuntu/server/demo/eureka-server/run.jar /home/ubuntu/server/web/eureka-server/run.jar
            cd /home/ubuntu/server/web
            sudo fuser -k -n tcp 8080 || true
            sudo fuser -k -n tcp 8081 || true
            sudo fuser -k -n tcp 8082 || true
            sudo fuser -k -n tcp 8083 || true
            sudo fuser -k -n tcp 8084 || true
            sudo fuser -k -n tcp 8761 || true
            sudo fuser -k -n tcp 6379 || true
            nohup java -jar eureka-server/run.jar > ./eureka-server/output.log 2>&1 &
            nohup java -jar ccc-chat/run.jar > ./ccc-chat/output.log 2>&1 &
            nohup java -jar ccc-user/run.jar > ./ccc-user/output.log 2>&1 &
            nohup java -jar ccc-menu/run.jar > ./ccc-menu/output.log 2>&1 &
            nohup java -jar ccc-game/run.jar > ./ccc-game/output.log 2>&1 &
            nohup java -jar api-gateway/run.jar > ./api-gateway/output.log 2>&1 &
            rm -rf /home/ubuntu/server/demo
